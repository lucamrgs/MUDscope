
"""
    TODO: Documentation
"""

import sys
import argparse
import os

cwd = os.getcwd()
sys.path.insert(1, cwd + '/src')
from Constants import *

import run


def is_valid_path(path, check_dir=True, check_file=True):
    if check_dir and check_file:
        return os.path.isfile(path) or os.path.isdir(path)
    if check_dir and not check_file:
        return os.path.isdir(path)
    if check_file and not check_dir:
        return os.path.isfile(path)
    return False


def module_main(arguments=None):

    parser = argparse.ArgumentParser(description='TBD')

    # If mode is "reject", 
    #   - the config file for the referred device and gateway information, and
    #   - the relative path to MUD (OpenFLow) rules in CSV
    # must be specified
    parser.add_argument('--devname', metavar='<name of device>', help='name of the device to which this MACRO applies. It is needed to reference the results of the calls and access related outputs.', required=True)
    
    
    parser.add_argument('--reject_config', metavar='<JSON file of MUD config for filtering data>', help='name of MUD config JSON for specified MUD to enforce.\nRequired if mode is "reject"', required=True)
    parser.add_argument('--reject_mud_rules', metavar='<Relative-path of CSV file of filtering rules (only OpenFlow standard supported ATM)>', help='CSV rules file generated by MUDgee, for specific device MUD to enforce.\nRequired if mode is "reject"', required=True)
    parser.add_argument('--reject_to_named_dir', metavar='<String>', help='Name of directory that will be generated in outputs/<device>/ where the results of the "reject" operation will be stored.\nThis parameter is optional', required=False)


    # Optional, if set, limits the number of packets that are processed when rejecting traffic
    parser.add_argument('--pcap_limit', metavar='<integer>', help='Number to indicate how many packets will be processed by either functionality', required=False)

    # Generation of custom NetFlow CSV file
    parser.add_argument('--flowsgen_tgt_dir', metavar='<String>', help='Full or relative path to directory containing MUD-rejected pcap files', required=False)
    
    parser.add_argument('--analysis_capture_metadata', metavar='<file path to json object/dict>', help='Metadata dictionary object describing the capture to analyse. \nIt shall contain at least "device_id" (string), and "deployment_info" (any type as of now) that describes the setting where the device is (e.g., lon, lat, industry_type, ...)', required=True)

    args = parser.parse_args(arguments)

    devname = args.devname

    reject_config = args.reject_config
    reject_mud_rules = args.reject_mud_rules
    reject_to_named_dir = args.reject_to_named_dir if args.reject_to_named_dir is not None else None
    pcap_limit = args.pcap_limit if args.pcap_limit is not None else None
    flowsgen_tgt_dir = args.flowsgen_tgt_dir if args.flowsgen_tgt_dir is not None else None
    analysis_capture_metadata = args.analysis_capture_metadata
    
    if not is_valid_path(reject_config):
        raise ValueError(f">>> ERROR: Invalid path to file or dir for reject_config: {reject_config}. Exiting.")
    if not is_valid_path(reject_mud_rules, check_dir=False):
        raise ValueError(f">>> ERROR: Invalid path to file to reject_mud_rules: {reject_mud_rules}. Exiting.")
    if flowsgen_tgt_dir is not None and is_valid_path(flowsgen_tgt_dir, check_file=False):
        raise ValueError(f">>> ERROR: Invalid path to dir for flowsgen_tgt_dir: {flowsgen_tgt_dir}. Exiting.")     
    if not is_valid_path(CHATACTERIZATION_METADATA_FOLDER + analysis_capture_metadata, check_dir=False):
        raise ValueError(f">>> ERROR: Invalid path to file to analysis_capture_metadata: {analysis_capture_metadata}. Exiting.")


    print('\n#################################################################################')
    print('############# ~~~~~~~~~~~~* RUNNING REJECT OPERATIONS *~~~~~~~~~~~~ #############')
    print('#################################################################################\n')
    run.main(['--mode', 'reject', '--reject_config', reject_config, '--reject_mud_rules', reject_mud_rules, '--reject_to_named_dir', reject_to_named_dir, '--pcap_limit', pcap_limit])

    print('\n################################################################################')
    print('############ ~~~~~~~~~~~~* RUNNING FLOWGEN OPERATIONS *~~~~~~~~~~~~ ############')
    print('################################################################################\n')
    flowsgen_tgt_dir = OUTPUTS_FOLDER + devname + '/'
    run.main(['--mode', 'flows_gen', '--flowsgen_tgt_dir', flowsgen_tgt_dir])

    print('\n################################################################################')
    print('############# ~~~~~~~~~~~~* RUNNING CHARACTERIZATION *~~~~~~~~~~~~ #############')
    print('################################################################################\n')
    analysis_tgt_dir = flowsgen_tgt_dir + devname + 'all-flows-csv/'
    analysis_tgt = analysis_tgt_dir + devname + 'all-flows-csv' + '-custom-fromat-CLN.csv'
    run.main(['--mode', 'analyze', '--analysis_action', ANALYSIS_ACTION_MRTA_CHARACTERIZE, '--analysis_tgt', analysis_tgt, '--analysis_devname', devname, '--analysis_capture_metadata', analysis_capture_metadata])




if __name__ == '__main__':
    module_main()
    sys.exit(0)