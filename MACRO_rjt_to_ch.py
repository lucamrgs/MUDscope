
"""
    TODO: Documentation
"""

import sys
import argparse
import os
import time

cwd = os.getcwd()
sys.path.insert(1, cwd + '/src')
from Constants import *

import run


def is_valid_path(path, check_dir=True, check_file=True):
    if check_dir and check_file:
        return os.path.isfile(path) or os.path.isdir(path)
    if check_dir and not check_file:
        return os.path.isdir(path)
    if check_file and not check_dir:
        return os.path.isfile(path)
    return False


def module_main(arguments=None):

    parser = argparse.ArgumentParser(description='TBD')

    # If mode is "reject", 
    #   - the config file for the referred device and gateway information, and
    #   - the relative path to MUD (OpenFLow) rules in CSV
    # must be specified
    parser.add_argument('--devname', metavar='<name of device>', help='name of the device to which this MACRO applies. It is needed to reference the results of the calls and access related outputs.', required=True)    
    parser.add_argument('--experiment', required=True)
    parser.add_argument('--dsr_path', help='Dataset Scaler Reference path. Must be specified to set global scaling parameters when processing MRT flows, for --analysisi_action={}'.format(ANALYSIS_ACTION_MRTA_CHARACTERIZE), required=True)
    parser.add_argument('--analysis_capture_metadata', metavar='<file path to json object/dict>', help='Metadata dictionary object describing the capture to analyse. \nIt shall contain at least "device_id" (string), and "deployment_info" (any type as of now) that describes the setting where the device is (e.g., lon, lat, industry_type, ...)', required=True)
    
    """
    parser.add_argument('--reject_config', metavar='<JSON file of MUD config for filtering data>', help='name of MUD config JSON for specified MUD to enforce.\nRequired if mode is "reject"', required=False)
    parser.add_argument('--reject_mud_rules', metavar='<Relative-path of CSV file of filtering rules (only OpenFlow standard supported ATM)>', help='CSV rules file generated by MUDgee, for specific device MUD to enforce.\nRequired if mode is "reject"', required=False)
    parser.add_argument('--reject_to_named_dir', metavar='<String>', help='Name of directory that will be generated in outputs/<device>/ where the results of the "reject" operation will be stored.\nThis parameter is optional', required=False)
    # Optional, if set, limits the number of packets that are processed when rejecting traffic
    parser.add_argument('--pcap_limit', metavar='<integer>', help='Number to indicate how many packets will be processed by either functionality', required=False)
    # Generation of custom NetFlow CSV file
    parser.add_argument('--flowsgen_tgt_dir', metavar='<String>', help='Full or relative path to directory containing MUD-rejected pcap files', required=False)
    """

    args = parser.parse_args(arguments)

    devname = args.devname
    experiment = args.experiment
    dsr_path = args.dsr_path
    analysis_capture_metadata = args.analysis_capture_metadata

    reject_config = f'configs/reject_configs/{devname}/{experiment}/'
    reject_mud_rules = f'result/{devname}/{devname}rule.csv'
    reject_to_named_dir = experiment
    flowsgen_tgt_dir = f'outputs/{devname}/{devname}_{experiment}/'

    #reject_config = args.reject_config
    #reject_mud_rules = args.reject_mud_rules
    #reject_to_named_dir = args.reject_to_named_dir if args.reject_to_named_dir is not None else None
    #pcap_limit = args.pcap_limit if args.pcap_limit is not None else None
    #flowsgen_tgt_dir = args.flowsgen_tgt_dir if args.flowsgen_tgt_dir is not None else None
    
    if not is_valid_path(reject_config):
        raise ValueError(f">>> ERROR: Invalid path to file or dir for reject_config: {reject_config}. Exiting.")
    if not is_valid_path(reject_mud_rules, check_dir=False):
        raise ValueError(f">>> ERROR: Invalid path to file to reject_mud_rules: {reject_mud_rules}. Exiting.")
    #if flowsgen_tgt_dir is not None and is_valid_path(flowsgen_tgt_dir, check_file=False):
    #    raise ValueError(f">>> ERROR: Invalid path to dir for flowsgen_tgt_dir: {flowsgen_tgt_dir}. Exiting.")     
    if not is_valid_path(CHATACTERIZATION_METADATA_FOLDER + analysis_capture_metadata, check_dir=False):
        raise ValueError(f">>> ERROR: Invalid path to file to analysis_capture_metadata: {analysis_capture_metadata}. Exiting.")
    if not is_valid_path(dsr_path):
        raise ValueError(f">>> ERROR: Invalid path to file for dsr_path: {dsr_path}. Exiting.")


    print('\n#################################################################################')
    print('############# ~~~~~~~~~~~~* RUNNING REJECT OPERATIONS *~~~~~~~~~~~~ #############')
    print('#################################################################################\n')
    #run.main(['--mode', 'reject', '--reject_config', reject_config, '--reject_mud_rules', reject_mud_rules, '--reject_to_named_dir', reject_to_named_dir])

    print('\n################################################################################')
    print('############ ~~~~~~~~~~~~* RUNNING FLOWGEN OPERATIONS *~~~~~~~~~~~~ ############')
    print('################################################################################\n')
    time.sleep(2)
    #flowsgen_tgt_dir = f'{OUTPUTS_FOLDER}{devname}_{experiment}/'
    print(flowsgen_tgt_dir)
    #run.main(['--mode', 'flows_gen', '--flowsgen_tgt_dir', flowsgen_tgt_dir])
    time.sleep(2)

    print('\n################################################################################')
    print('############# ~~~~~~~~~~~~* RUNNING CHARACTERIZATION *~~~~~~~~~~~~ #############')
    print('################################################################################\n')
    analysis_tgt = f'{flowsgen_tgt_dir}{devname}_{experiment}-all-flows-csv/'
    print(analysis_tgt)
    #analysis_tgt = analysis_tgt_dir + devname + 'all-flows-csv' + '-custom-fromat-CLN.csv'
    #run.main(['--mode', 'analyze', '--analysis_action', ANALYSIS_ACTION_MRTA_CHARACTERIZE, '--session_name', experiment, '--analysis_tgt', analysis_tgt, '--analysis_devname', devname, '--analysis_capture_metadata', analysis_capture_metadata, '--dsr_path', dsr_path])

    print('\n################################################################################')
    print('############# ~~~~~~~~~~~~~~~* GENERATING MRT FEED *~~~~~~~~~~~~~~~ #############')
    print('################################################################################\n')
    #analysis_mrtgen_tgt = analysis_tgt_dir + devname + 'all-flows-csv' + '-custom-fromat-CLN.csv'
    analysis_mrtgen_tgt = f'outputs/{devname}/{devname}_{experiment}/{devname}_{experiment}_mrt_characterizations'
    run.main(['--mode', 'analyze', '--analysis_devname', devname, '--session_name', experiment, '--analysis_action', ANALYSIS_ACTION_DEVICE_MRT_EVOLUTION_DATAGEN, '--analysis_tgt', analysis_mrtgen_tgt])

    #python3 run.py --mode analyze --analysis_devname ut-wansview-cam --analysis_action device_mrt_evolution_datagen --analysis_tgt outputs/ut-wansview-cam/ut-wansview-cam_cd-test/ut-wansview-cam_mrt_characterizations



if __name__ == '__main__':
    module_main()
    sys.exit(0)