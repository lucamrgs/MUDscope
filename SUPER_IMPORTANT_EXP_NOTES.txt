
Backend links of devices are for whatever reason not included in the MUD generation by Hamzaa.
Since backend IPs change, I have to MANUALLY INSERT ROUTING RULES for MUD BACKENDS for devices, JUST BEFORE RUNNING THE EXPERIMENTS, because they change.


============================>>>>>>>
============================>>>>>>> Way to adjust: create profile on benign traffic, 
============================>>>>>>> filter benign traffic for device,
============================>>>>>>> fetch benign connections not included
============================>>>>>>>



UTWENTE

- TP LINK PLUG:
    * one general amazon aws ec2 instance, TCP
    * one eu-west ec2 instance, TCP

- Wansview camera:
    * German digital ocean, 46.101.112.157, UDP
    * German ISPs digital ocean 165.22.94.18 UDP (important apparently)
    * Alibaba, 8.211.41.33, UDP
    * Alibaba, 47.246.48.210 UDP
    * Blackbaze NL, 45.11.37.15, TCP
    * Germany/Amazon 3.122.229.130 UDP
    * Mobile operator for app like 5.90.16.171 UDP (vodafone)
    * Dutch ISPs digital ocean 64.227.65.213 UDP

- Ring doorbell
    * 18.205.125.57 Amazon US, TCP
    * 34.243.240.136 Amazon dublin, TCP and UDP
    * 3.213.90.77 Amazon aws TCP https
    # 3.229.206.49 Amazon aws, TCP
    * 108.128.134.124 Amazon dublin (ec2 eu-west), UDP - streaming
    * 34.251.182.118, Amazon dublin, UDP
    * 176.34.103.165 Amazon dublin, UDP, RTCP (?)
    * 104.17.128.1 / 104.17.127.1 Cloudflare US, TCP


TU/e

- TP LINK PLUG

- FOSCAM camera

- Ring doorbell


****************************** ~ ~ Processing ntoes ~ ~ ******************************





****************************** ~ ~ PROCEDURE ~ ~ ******************************

*********** Experiments runs:

> Gather general NormalOps traffic pcap
> Fix two devices at each of the two nodes (UT, TU/e)
> Run experiments, COLLECT ONE PCAP (per node) PER EXPERIMENT ROUTINE: two pcaps per routines:
    - UT-routine#-deviceA-deviceB
    - TUe-routine#-deviceA-deviceC

***** First run:
NOTE: IoT-KANG NIDS dataset has pcaps for ~ 1 MINUTE each

TU/e : Foscam, TPLink Plug
UT: Wansview, TPLink Plug

*** Sequence of routines:

**tue-tplink, ut-tplink**,
tue-foscam, ut-wansview
tue-foscam, ut-tplink OR **tue-tplink, ut-wansview**
ut-wansview, ut-tplink OR tue-foscam, tue-tplink

>>> Repeat three times?

*********** My analysis

> Generate basic MUDgee MUD profile for devices with NormalOps pcaps
> VERIFY FILTER PCAPS OF *EXPERIMENTS* -> MUDs, ADDITIONAL BACKENDS, INSERT RULES MANUALLY
> Per each pair UT-TUe pcaps, divide each routine pcap *PER TIME*, so that things OVERLAP AS EXPECTED (something like editpcap -i <seconds> ...)

$> editcap -i <secs> input.pcap output.pcap (output is the base name for the multiple outputs)

> GENERATE AND STORE DEVICE-SPECIFIC MRT scaling datasets:
    * all MRT device(s?) traffic altogether
    * convert to CSV netflows
    * store as reference scaling dataset

$> device_mrt_pcaps_to_csv to target merged pcap OF DEVICES

> Run code pipeline, pray for decent results

    UTWENTE: $> python3 src/generate_rjt_configs.py --tgt_dir /Users/lucamrgs/Big_Data/FederatedLab/UT/Malign/exp_1/ --devname ut-tplink-plug --dev_mac 00:31:92:e1:7b:17 --gw_mac 08:00:27:86:05:66 --gw_ip4 192.168.32.1
    TUEINDH: $> python3 src/generate_rjt_configs.py --tgt_dir /Users/lucamrgs/Big_Data/FederatedLab/TUe/Malign/exp_1/ --devname tue-tplink-plug --dev_mac 68:ff:7b:df:58:4d --gw_mac 08:00:27:e7:f3:5c --gw_ip4 192.168.10.1
    
    $> python3 run.py --mode reject --reject_mud_rules result/<device-id>/<device-id>rule.csv --reject_config path/to/<name of generated rjt folder>

    $> python3 run.py --mode flows_gen --flowsgen_tgt_dir outputs/<device-id>[/rjt pcaps folder]

> Generate device scaling reference dataset
    UTWENTE: python3 run.py --mode flows_gen --flowsgen_tgt_dir /Users/lucamrgs/Big_Data/FederatedLab/UT/ [targets the ref pcaps I saved there]
        $> python3 src/scale_reference_df_script.py /Users/lucamrgs/Big_Data/FederatedLab/UT/ut-tplink-scaling-ref-flows-custom-hdr-CLN.csv
    TUEINDH: python3 run.py --mode flows_gen --flowsgen_tgt_dir /Users/lucamrgs/Big_Data/FederatedLab/TUe/ [targets the ref pcaps I saved there]
        $> python3 src/scale_reference_df_script.py/Users/lucamrgs/Big_Data/FederatedLab/TUe/tue-tplink-scaling-ref-flows-custom-hdr-CLN.csv

    >>> /Users/lucamrgs/Big_Data/FederatedLab/UT/ut-tplink-scaling-ref/ut-tplink-scaling-ref-flows-custom-hdr-CLN-SCALED.csv
    >>> /Users/lucamrgs/Big_Data/FederatedLab/UT/ut-wansview-scaling-ref/ut-wansview-scaling-ref-flows-custom-hdr-CLN-SCALED.csv
    >>> /Users/lucamrgs/Big_Data/FederatedLab/TUe/tue-tplink-scaling-ref-flows-custom-hdr-CLN-SCALED.csv


    >>> ALL UT SCALING ref  /Users/lucamrgs/Big_Data/FederatedLab/UT/ut-all-scaling-ref-flows-custom-hdr-CLN-SCALED.csv
    >>> ALL TUe SCALING ref /Users/lucamrgs/Big_Data/FederatedLab/TUe/tue-all-scaling-ref-flows-custom-hdr-CLN-SCALED.csv

> Generate device deployment metadata json
    >>> ch_fedlab_ut_tplink.json
    >>> ch_fedlab_tue_tplink.json

    $> python3 run.py --mode analyze --analysis_devname <device-id> --analysis_action mrta_characterize --dsr_path <path to dataset scaling ref> --analysis_capture_metadata <metadata-filename>.json --analysis_tgt outputs/<device-id>/<flows CSV folder>

    $> python3 run.py --mode analyze --analysis_devname <device-id> --analysis_action device_mrt_evolution_datagen --analysis_tgt outputs/<device-id>/<mrt characterizations folder>



NEXT EXPERIMENTS:

2. DATA AVAILABLE (exp2) >>> DONE - TO DO AGAIN, GOT MESSED UP WITH ASYNC TIMINGS. Results are indicative anyway, it's clear enough a shift in the 'central' time behaviour
    ATTACKED UT Wansview, ATTACKED TU/e plug (cut traffic from plug)

3. DATA AVAILABLE (exp1) >>> DONE - results as expected: negligible fluctuations in both feeds. Rejected traffic shows 'flat' behaviour
    NOT ATTACKED UT wansview, NOT ATTACKED TU/e foscam
4. DATA AVAILABLE (exp2)
    NOT ATTACKED TU/e foscam, ATTACKED wansview

5. DATA AVAILABLE
    ATTACKED UT wansview, ATTACKED TU/e foscam



*************************************************************************************************************************
S O M E D I F F E R E N C E S 
IN THE NON-CORRELATING FLUCTUATIONS CAN BE EXPLAINED BY THE DEVICE's REPLIES TO THE MALICIOUS TRAFFIC!!@!!!!!!!!!1!111!!1

FOR INSTANCE, of course if you DoS an open port to one device, and a closed port to another device,
    the device with open port will send replies, thereby doubling the amount of rejected traffic, and producing more fluctuations 
    in mut/bw/fw matches RELATIVE PERCENTAGE
    >>> Since the RESPONSE-REPLY flows are grouped together anyway, INDEED, THE CLUSTERS BALANCE and NUMBER of mut/fw/bw matches
        IS STILL CONSISTENT!!!!!!!
It's the same for scans, it depends on how the device replies!
*************************************************************************************************************************